---
title: "inverse-vizu"
format:
  html: 
    echo: false  
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

<!-- https://observablehq.com/@triptych/getting-started-with-matter-js -->

```{ojs}
Matter = require('matter-js').catch(() => window["Matter"]);

{
    var Example = Example || {};

    Example.galton = function() {
    var Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Composite = Matter.Composite,
        Composites = Matter.Composites,
        Common = Matter.Common,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse,
        World = Matter.World,
        Bodies = Matter.Bodies;

    // create engine
    var engine = Engine.create({
        enableSleeping: true
        }),
        world = engine.world;

    const width = 500;
    const height = 500;
    // create renderer
    var render = Render.create({
        element: document.body,
        engine: engine,
        options: {
        width: width,
        height: height,
        wireframes: false
        }
    });

    Render.run(render);

    // create runner
    var runner = Runner.create();
    Runner.run(runner, engine);

    const size = 4;
    const discretize = (x) => Math.round(x / size) * size;

    // add bodies
    let total = 5000;
    setInterval(() => {
        if (total-- > 0) {
        const circle = Bodies.rectangle(width/2 + discretize((-0.5 + Math.random())*400), -20, size,size, {
            frictionStatic: 0.0,
            collisionFilter: {
                group: -1
            },
            sleepThreshold: 25,
            render: {
            fillStyle: "#ff00ff",
            visible: true
            }
        });

        Matter.Events.on(circle, "sleepStart", () => {
            Matter.Body.setStatic(circle, true);
        });
        World.add(world, circle);
        }
    }, 1);

    World.add(
        world,
        Bodies.rectangle(width/2, height-100, width, 100, {
        isStatic: true,
        render: {
            fillStyle: "#ffffff",
            visible: true
        },
        collisionFilter: {
            group: -1
        }
        })

    );

    // World.add(world, pegs);

    return {
        engine: engine,
        runner: runner,
        render: render,
        canvas: render.canvas,
        stop: function() {
        Matter.Render.stop(render);
        Matter.Runner.stop(runner);
        }
    };
    };

    Example.galton();
}
```
