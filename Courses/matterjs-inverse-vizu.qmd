---
title: "inverse-vizu"
format:
  html: 
    echo: false  
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

<!-- https://observablehq.com/@triptych/getting-started-with-matter-js -->

```{ojs}
Matter = require(await FileAttachment("./matter.alpha.min.js").url()).catch(() => window["Matter"])

{
    var Example = Example || {};

    Example.galton = function() {
        var Engine = Matter.Engine,
            Render = Matter.Render,
            Runner = Matter.Runner,
            Composite = Matter.Composite,
            Composites = Matter.Composites,
            Common = Matter.Common,
            MouseConstraint = Matter.MouseConstraint,
            Mouse = Matter.Mouse,
            World = Matter.World,
            Bodies = Matter.Bodies;

        // create engine
        var engine = Engine.create({
            enableSleeping: true
            }),
            world = engine.world;

        const width = 500;
        const height = 500;
        // create renderer
        var render = Render.create({
            element: document.body,
            engine: engine,
            options: {
            width: width,
            height: height,
            wireframes: false
            }
        });



        Render.run(render);

        // create runner
        var runner = Runner.create({
            delta: 1000 / (60 * 10), // 600Hz delta = 1.666ms = 10upf @ 60fps (10x default precision)
            maxFrameTime: 1000 / 20 // performance budget
        });
        Runner.run(runner, engine);

        const size = 4;
        const discretize = (x) => Math.round(x / size) * size;

        // add bodies
        let total = 3000;
        setInterval(() => {
            if (total-- > 0) {
            const square = Bodies.rectangle(width/2 + discretize((-0.5 + Math.random())*400), -20, size,size, {
                sleepThreshold: 25,
                friction: 1,
                restitution: 0.0,
                slop: 0,
                render: {
                fillStyle: "#ff00ff",
                visible: true
                }
            });

            Matter.Events.on(square, "sleepStart", () => {
                Matter.Body.setStatic(square, true);
            });
            World.add(world, square);
            }
        }, 1);

        World.add(
            world,
            Bodies.rectangle(width/2, height-20, width, 10, {
            isStatic: true,
            render: {
                fillStyle: "#ffffff",
                visible: true
            }
            })

        );

        // World.add(world, pegs);

        return {
            engine: engine,
            runner: runner,
            render: render,
            canvas: render.canvas,
            stop: function() {
            Matter.Render.stop(render);
            Matter.Runner.stop(runner);
            }
        };
    };

    Example.galton();

    // const delta = 1000 / 60;
    // const subSteps = 50;
    // const subDelta = delta / subSteps;
    // const {engine, runner, render, canvas, stop} = Example.galton();
    // (function run() {
    //     window.requestAnimationFrame(run);
    //     for (let i = 0; i < subSteps; i += 1) {
    //     Matter.Engine.update(engine, subDelta);
    //     }
    // })();
}
```
