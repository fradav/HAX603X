---
title: "Perspectives historiques"
format:
  html:
      out.width: 50%
---



## L'aiguille de Buffon

[Georges-Louis Leclerc, Comte de Buffon](https://fr.wikipedia.org/wiki/Georges-Louis_Leclerc_de_Buffon)^[[Georges-Louis Leclerc, Comte de Buffon](https://fr.wikipedia.org/wiki/Georges-Louis_Leclerc_de_Buffon): (1707-1788)
 naturaliste, mathématicien et industriel français du siècle des Lumières
<img src="https://upload.wikimedia.org/wikipedia/commons/b/b5/Georges-Louis_Leclerc_de_Buffon.jpg" width="65%" style="display: block; margin-right: auto; margin-left: auto;" alt="Portrait de Georges-Louis Leclerc, comte de Buffon.
Huile sur toile de François-Hubert Drouais, Montbard, musée Buffon." title="Portrait de Georges-Louis Leclerc, comte de Buffon.
Huile sur toile de François-Hubert Drouais, Montbard, musée Buffon."></img>]

Une aiguille de taille 1 tombe sur un parquet composé de lattes de largeur 1. Quelle est la probabilité que l'aiguille croise une ligne de la trame du parquet ?

Voilà la question que s'est posée Buffon en 1733.

On va simuler cette approche.
Pour cela il s'agit de tirer la position du centre de l'aiguille, puis de manière aléatoire son angle de chute.
Cela donne le code suivant:


```{python}
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# fix random generator seed

rng = np.random.default_rng(42)

# Create points uniformly sample between 0.5 and 3.5
n_samples = 16
centers_x = rng.uniform(-2.5, 2.5, n_samples)
print(centers_x)
angles = rng.uniform(0, 2 * np.pi, n_samples)
r = 1

centers_y = rng.uniform(-2 * r, 2 * r, n_samples)

borders_right = np.zeros((n_samples, 2))
borders_right[:, 0] =  centers_x + r * np.cos(angles) / 2
borders_right[:, 1] =  centers_y + r * np.sin(angles) / 2

borders_left = np.zeros((n_samples, 2))
borders_left[:, 0] = centers_x + r * np.cos(angles + np.pi)/2
borders_left[:, 1] = centers_y + r * np.sin(angles + np.pi)/2

centers_x_round =np.round(centers_x)
overlap = (borders_right[:, 0] - centers_x_round) * (borders_left[ :, 0] - centers_x_round) < 0
overlap = np.where(overlap, 1, 0)
n_overlap = int(np.sum(overlap))

# create a numpy array of size 3*n_samples,2 full of None:
borders_red = np.empty((3 * n_overlap, 2), dtype=object)
borders_red.fill(None)

borders_red[::3,:] = borders_right[overlap == 1]
borders_red[1::3,:] = borders_left[overlap == 1]



borders_blue = np.empty((3 * (n_samples-n_overlap), 2), dtype=object)
borders_blue.fill(None)

borders_blue[::3,:] = borders_right[overlap == 0]
borders_blue[1::3,:] = borders_left[overlap == 0]


# create a numpy array of size 3*n_samples,2 full of None with the values from overlap
overlaps = np.empty((3 * n_samples), dtype=object)
overlaps.fill(None)

overlaps[::3] = overlap
overlaps[1::3] = overlap
overlaps[2::3] = overlap


print(f"Approximation de pi {2 / (np.sum(overlap) / n_samples)}")

# Plot the segment delimited by borders_left and border_right, in red with extremities as red circle
fig = go.Figure()


# Use a loop to plot vertical lines equation "y=c" for integer values c in [-2, -1, 0, 1, 2]
for i in range(-3, 4):
    fig.add_shape(
        type="line",
        y0=-3,
        x0=i,
        y1=3,
        x1=i,
        line=dict(
            color="black",
            width=3,
        )
    )

color = np.where(overlaps, 1., 0.)
# Plot the segment delimited by borders_left and border_right, with the color defined above
fig.add_trace(

    go.Scatter(x=borders_red[:,0], y=borders_red[:,1], mode='lines', line=dict(width=1), marker=dict(color='lightblue'))
    )
fig.add_trace(
    go.Scatter(x=borders_blue[:,0], y=borders_blue[:,1], mode='lines', line=dict(width=1), marker=dict(color='blue'))
)
    # color red if overlap == True, blue otherwise


# fig.add_trace(
#     go.Scatter(x=borders[:,0], y=borders[:,1], mode='lines', line=dict(color=color, width=1)))
#     # color red if overlap == True, blue otherwise

fig.update_layout(
    yaxis_scaleanchor="x",
)


# Update to  change xaxis range to [-3.5,3.5]
fig.update_layout(
    template="simple_white",
    xaxis=dict(
        range=[-3.5, 3.5],
        constrain="domain",
        showgrid=False
    )
)

fig.update_layout(xaxis_visible=False, yaxis_visible=False)


fig.show()



```



## Méthode de Monte-Carlo

[John von Neumann](https://fr.wikipedia.org/wiki/John_von_Neumann)^[[John von Neumann](https://fr.wikipedia.org/wiki/John_von_Neumann):  (1903-1957) mathématicien et physicien américano-hongrois, un des pères de l'informatique.
<img src="https://upload.wikimedia.org/wikipedia/commons/d/d6/JohnvonNeumann-LosAlamos.jpg" width="65%" style="display: block; margin-right: auto; margin-left: auto;" title="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information." alt="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information."></img>]



[Nicholas Metropolis](https://fr.wikipedia.org/wiki/Nicholas_Metropolis)^[[Nicholas Metropolis](https://fr.wikipedia.org/wiki/Nicholas_Metropolis):  (1915-1999)
<img src="https://upload.wikimedia.org/wikipedia/commons/5/56/Nicholas_Metropolis_cropped.PNG" width="65%" style="display: block; margin-right: auto; margin-left: auto;" title="Nicholas Metropolis à Los Alamos National Laboratory" alt="Nicholas Metropolis à Los Alamos National Laboratory"></img>]



[Stanisław Ulam](https://fr.wikipedia.org/wiki/Stanislaw_Ulam)^[[Stanisław Ulam](https://fr.wikipedia.org/wiki/Stanislaw_Ulam):  (1909-1984)
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Stanislaw_Ulam.tif/lossy-page1-413px-Stanislaw_Ulam.tif.jpg" width="65%" style="display: block; margin-right: auto; margin-left: auto;" title="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information." alt="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information."></img>]



## Hasting Metropolis

## Culture populaire "Monty Hall game show"